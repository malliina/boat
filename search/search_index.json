{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Boat-Tracker A solution for tracking boats. The Boat-Tracker solution consist of the following components: a boat agent a backend server a web app native mobile applications (iOS and Android) The server and frontend is deployed to www.boat-tracker.com . The iOS app codebase is in GitHub repository boattracker-ios . The Android app is in repo boattracker-android . Agent The agent listens to NMEA 0183 sentences in the boat; plotter connectivity is over WLAN or cable sends received sentences over a WebSocket to the backend at www.boat-tracker.com is typically installed on a Raspberry Pi with a 3G module, powered by the boat or external battery Backend The backend receives, processes and saves NMEA 0183 sentences from connected agents receives live automatic identification system (AIS) tracking data of vessels in the Gulf of Finland sends location updates to any connected web or mobile clients Frontend The frontend is the web app at www.boat-tracker.com updates live tracks as received from the backend shows saved tracks for signed-in users provides a map view, table view and charts for visualization","title":"Overview"},{"location":"#boat-tracker","text":"A solution for tracking boats. The Boat-Tracker solution consist of the following components: a boat agent a backend server a web app native mobile applications (iOS and Android) The server and frontend is deployed to www.boat-tracker.com . The iOS app codebase is in GitHub repository boattracker-ios . The Android app is in repo boattracker-android .","title":"Boat-Tracker"},{"location":"#agent","text":"The agent listens to NMEA 0183 sentences in the boat; plotter connectivity is over WLAN or cable sends received sentences over a WebSocket to the backend at www.boat-tracker.com is typically installed on a Raspberry Pi with a 3G module, powered by the boat or external battery","title":"Agent"},{"location":"#backend","text":"The backend receives, processes and saves NMEA 0183 sentences from connected agents receives live automatic identification system (AIS) tracking data of vessels in the Gulf of Finland sends location updates to any connected web or mobile clients","title":"Backend"},{"location":"#frontend","text":"The frontend is the web app at www.boat-tracker.com updates live tracks as received from the backend shows saved tracks for signed-in users provides a map view, table view and charts for visualization","title":"Frontend"},{"location":"agent/","text":"Agent Run the agent software on a small computer and connect it to your chartplotter. The agent runs as a Systemd service and exposes an HTTP server on port 8080. It is tested on a Raspberry Pi 3 running Raspbian. Installation Have a Raspberry Pi available in your boat, power it up and make sure you can connect to it. Download the latest version of the agent from www.boat-tracker.com/files SSH to your Raspberry Pi Install the downloaded package: dpkg -i <boat-agent_x.x.x_all.deb> Open a web browser and connect to the started HTTP server on port 8080 In the web form, input the IP address and HTTP port of your chartplotter Optionally, input the boat token available in the iOS app Connect this agent to the same network (WLAN or cable) as your chartplotter Following this setup: The agent establishes a TCP connection to your chartplotter and receives any emitted NMEA 0183 messages The agent also opens a WebSocket to the backend at wss://www.boat-tracker.com Sentences received from the chartplotter are sent over the WebSocket to the backend Alternatively, you can configure the plotter IP/port -combination in a configuration file set by the conf.dir system property containing the following format: { \"host\": \"10.0.0.1\", \"port\": 10033, \"token\": \"abcd1234\", \"enabled\": true } Optionally, sign in to the iOS app to obtain a boat token. A token assigns any NMEA 0183 messages to the user with the given token, and subsequently the user can view any sentences and tracks recorded with the given token from the iOS app or web interface. Custom implementations If this agent is not good enough for you, you can send NMEA 0183 sentences to boat-tracker.com using the HTTP API directly. Open a WebSocket to wss://www.boat-tracker.com/ws/boats Optionally, provide your boat token in header X-Token when opening the WebSocket. Send NMEA 0183 sentences over the socket as JSON-formatted text messages The JSON messages must be of the following format: { \"sentences\": [ \"$GPGGA,174239,6110.2076,N,06450.5518,E,1,12,0.50,0,M,19.5,M,,*63\", \"$GPZDA,141735,04,05,2018,-03,00*69\" ] }","title":"Agent"},{"location":"agent/#agent","text":"Run the agent software on a small computer and connect it to your chartplotter. The agent runs as a Systemd service and exposes an HTTP server on port 8080. It is tested on a Raspberry Pi 3 running Raspbian.","title":"Agent"},{"location":"agent/#installation","text":"Have a Raspberry Pi available in your boat, power it up and make sure you can connect to it. Download the latest version of the agent from www.boat-tracker.com/files SSH to your Raspberry Pi Install the downloaded package: dpkg -i <boat-agent_x.x.x_all.deb> Open a web browser and connect to the started HTTP server on port 8080 In the web form, input the IP address and HTTP port of your chartplotter Optionally, input the boat token available in the iOS app Connect this agent to the same network (WLAN or cable) as your chartplotter Following this setup: The agent establishes a TCP connection to your chartplotter and receives any emitted NMEA 0183 messages The agent also opens a WebSocket to the backend at wss://www.boat-tracker.com Sentences received from the chartplotter are sent over the WebSocket to the backend Alternatively, you can configure the plotter IP/port -combination in a configuration file set by the conf.dir system property containing the following format: { \"host\": \"10.0.0.1\", \"port\": 10033, \"token\": \"abcd1234\", \"enabled\": true } Optionally, sign in to the iOS app to obtain a boat token. A token assigns any NMEA 0183 messages to the user with the given token, and subsequently the user can view any sentences and tracks recorded with the given token from the iOS app or web interface.","title":"Installation"},{"location":"agent/#custom-implementations","text":"If this agent is not good enough for you, you can send NMEA 0183 sentences to boat-tracker.com using the HTTP API directly. Open a WebSocket to wss://www.boat-tracker.com/ws/boats Optionally, provide your boat token in header X-Token when opening the WebSocket. Send NMEA 0183 sentences over the socket as JSON-formatted text messages The JSON messages must be of the following format: { \"sentences\": [ \"$GPGGA,174239,6110.2076,N,06450.5518,E,1,12,0.50,0,M,19.5,M,,*63\", \"$GPZDA,141735,04,05,2018,-03,00*69\" ] }","title":"Custom implementations"},{"location":"develop/","text":"Develop Develop Boat-Tracker clients using this JSON API. The iOS , Android and web apps all use this API. Versioning The JSON API is versioned. Specify the API version in the Accept HTTP header. The following versions are currently supported: application/vnd.boat.v1+json application/vnd.boat.v2+json The documentation covers the latest API version (v2), therefore use the following header: Accept application/vnd.boat.v2+json Authentication Boat-Tracker uses Google's OAuth 2.0 authentication system. Clients must Initiate the OAuth 2.0 flow with Google Obtain an ID token upon successful authentication with Google Deliver the ID token to the Boat-Tracker backend when making authenticated API calls Set the ID token in the Authorization header under the Bearer scheme: Authorization: Bearer google_id_token_goes_here Errors Error responses use the following JSON format: { \"errors\": [ { \"message\": \"JWT expired.\", \"key\": \"token_expired\" } ] } Error keys include but are not limited to: Key Meaning token_expired The JWT has expired. The client should obtain a new one from Google and try again. input The client provided invalid input. Check your inputs. generic Most likely clients cannot recover from this.","title":"Develop"},{"location":"develop/#develop","text":"Develop Boat-Tracker clients using this JSON API. The iOS , Android and web apps all use this API.","title":"Develop"},{"location":"develop/#versioning","text":"The JSON API is versioned. Specify the API version in the Accept HTTP header. The following versions are currently supported: application/vnd.boat.v1+json application/vnd.boat.v2+json The documentation covers the latest API version (v2), therefore use the following header: Accept application/vnd.boat.v2+json","title":"Versioning"},{"location":"develop/#authentication","text":"Boat-Tracker uses Google's OAuth 2.0 authentication system. Clients must Initiate the OAuth 2.0 flow with Google Obtain an ID token upon successful authentication with Google Deliver the ID token to the Boat-Tracker backend when making authenticated API calls Set the ID token in the Authorization header under the Bearer scheme: Authorization: Bearer google_id_token_goes_here","title":"Authentication"},{"location":"develop/#errors","text":"Error responses use the following JSON format: { \"errors\": [ { \"message\": \"JWT expired.\", \"key\": \"token_expired\" } ] } Error keys include but are not limited to: Key Meaning token_expired The JWT has expired. The client should obtain a new one from Google and try again. input The client provided invalid input. Check your inputs. generic Most likely clients cannot recover from this.","title":"Errors"},{"location":"endpoints/","text":"HTTP Endpoints HTTP endpoints return JSON. Live tracking data is delivered over WebSockets, while basic HTTP endpoints serve a number of supporting functions as documented below. Units of measurement The following units of measure are used in JSON responses where applicable: Measurement Unit Speed Knots Depth Meters Distance (old) Millimeters Distance (new) Meters Draft Meters Temperature Celsius All units of measure are represented as JSON numbers. GET /tracks Returns tracks driven: { \"tracks\": [ { \"track\": 123, \"trackName\": \"abc\", \"boat\": 12, \"boatName\": \"Her Highness\", \"points\": 42, \"duration\": 3500, \"distance\": 1234, \"topSpeed\": 24.1, \"avgSpeed\": 23.2, \"avgWaterTemp\": 6.1, \"topPoint\": { \"id\": 123, \"coord\": { \"lng\": 60.24, \"lat\": 24.1 }, \"speed\": 24.1 } } ] } PUT /tracks/:track_name Modifies the title of the given track: { \"title\": \"Evening boating\" } Provide the track name in the URL. PATCH /tracks/:track_id Modifies the comments of the given track: { \"comments\": \"Rainy and delightful!\" } GET /users/me Returns user information including any boats: { \"user\": { \"id\": 123, \"username\": \"jack\", \"email\": \"jack@example.com\", \"boats\": [ { \"id\": 12, \"name: \"Her Highness\", \"token\": \"abc123\" } ], \"enabled\": true, \"invites\": [ { \"boat\": { \"id\": 15, \"name\": \"HMS Royal\" }, \"state\": \"awaiting\" } ], \"friends\": [ { \"boat\": { \"id\": 14, \"name\": \"Titanic\" }, \"friend\": { \"id\": 123, \"email\": \"baby@example.com\" }, \"state\": \"accepted\" } ] } } Key invites contains any boats you have been granted access. Key friends contains any boat permissions you have granted to other users. Key state is any of the following: awaiting accepted rejected PUT /users/me Changes the user's language. Use the following payload: { \"language\": \"language_code_here\" } The following language codes are supported: Code Language sv-SE Swedish fi-FI Finnish en-US English POST /users/me Use this endpoint to exchange an authorization code for an ID token. Provide the code in the JSON payload: { \"code\": \"abcd1234\" } Returns an ID token: { \"email\": \"santa@example.com\", \"idToken\": \"abc.def.geh\" } Provide the returned ID token in the Authorization header of subsequent requests. POST /users/me/tokens Refresh your ID token using this endpoint. Returns a refreshed ID token: { \"email\": \"santa@example.com\", \"idToken\": \"abc.def.geh\" } Call this endpoint if other endpoints respond with HTTP 403. PATCH /boats/:boat_id Changes the name of the given boat: { \"boatName\": \"My Lady\" } Obtain boat IDs using the /users/me endpoint above. POST /users/notifications Subscribes to push notifications: { \"token\": \"device_token\", \"device\": \"ios\" } Key device must be one of: Value Meaning ios iOS token android Android token POST /users/notifications/disable Unsubscribes from push notifications: { \"token\": \"device_token\", } GET /routes/:srclat/:srclng/:destlat/:destlng Returns the shortest route between two points along fairways. Provide the source and destination coordinates in the request. Example request: GET /routes/60.14729/24.85396/60.11478/24.87489 Example response: { \"from\": { \"lat\": 60.14729290768696, \"lng\": 24.853965806435724 }, \"to\": { \"lat\": 60.1147881804653, \"lng\": 24.87489090627807 }, \"totalCost\": 5498.050648111757, \"duration\": 0.355, \"route\": { \"cost\": 4770.0589143530415, \"links\": [ { \"cost\": 0, \"to\": { \"lat\": 60.149, \"lng\": 24.8534 } }, { \"cost\": 1400.7671712474576, \"to\": { \"lat\": 60.137, \"lng\": 24.8611 } }, ... { \"cost\": 670.6786486135463, \"to\": { \"lat\": 60.119, \"lng\": 24.8702 } } ] } } The response contains the following items: Key Type Meaning totalCost Number Distance in meters from source to destination, including the distance from the provided coordinates to nearby fairways route.cost Number Distance in meters along fairways route.links Array The route as an array of hops along fairway points POST /users/boats Boat owners may invite other users to access the data of their boat: To invite user 123 to access boat 14: { \"boat\": 14, \"email\": \"friend@example.com\" } POST /invites/respond Respond to an invite using the following JSON payload: { \"boat\": 14, \"accept\": true } POST /invites/revoke To revoke access from user to boat : { \"boat\": 14, \"user\": 12 } WebSocket /ws/updates Clients (web, iOS, Android) receive live boat updates using this WebSocket endpoint. The JSON-formatted messages use the following general format: { \"event\": \"event_type_here\", \"body\": { ... event-specific body goes here ... } } The following event types are used, with examples below: Event Meaning coords Updated coordinates for boats vessels Updated AIS location data for vessels ping Ping event (can be ignored) Updated coordinates Example JSON: { \"event\": \"coords\", \"body\": { \"coords\": [ { \"coord\": { \"lng\": 60.24, \"lat\": 24.1 }, \"boatTime\": \"\", \"speed\": 41.1, \"waterTemp\": 11.2, \"depth\": 5000 } ], \"from\": { \"track\": \"123\", \"trackName\": \"abc\", \"trackTitle\": \"Nice ride\", \"canonical\": \"nice-ride\", \"boat:\": \"456\", \"boatName\": \"Amina\", \"username\": \"jack\", \"points\": 42, \"duration\": 3500, \"distance\": 1234, \"topSpeed\": 24.1, \"avgSpeed\": 23.2, \"avgWaterTemp\": 6.1 } } } Updated vessel locations Example JSON: { \"event\": \"vessels\", \"body\": { \"vessels\": [ { \"mmsi\": 123456, \"name\": \"Amina\", \"shipType\": 80, \"coord\": { \"lng\": 60.24, \"lat\": 24.1 }, \"sog\": 9.8, \"cog\": 123.1, \"draft\": 8.7, \"destination\": \"TALLINN\", \"eta\": 12, \"timestampMillis\": 123456789, \"timestampFormatted\": \"\" } ] } } Ping event Example JSON: { \"event\": \"ping\", \"body\": { \"sent\": 123456789 } } WebSocket /ws/boats Agents send NMEA 0183 sentences to the backend using this endpoint. The JSON-formatted messages must be of the following format: { \"sentences\": [ \"$GPGGA,174239,6110.2076,N,06450.5518,E,1,12,0.50,0,M,19.5,M,,*63\", \"$GPZDA,141735,04,05,2018,-03,00*69\" ] } Provide the newest sentences last in the sentences array. The server may send ping events to the agent over the socket at any time: { \"event\": \"ping\", \"body\": { \"sent\": 123456789 } }","title":"HTTP Endpoints"},{"location":"endpoints/#http-endpoints","text":"HTTP endpoints return JSON. Live tracking data is delivered over WebSockets, while basic HTTP endpoints serve a number of supporting functions as documented below.","title":"HTTP Endpoints"},{"location":"endpoints/#units-of-measurement","text":"The following units of measure are used in JSON responses where applicable: Measurement Unit Speed Knots Depth Meters Distance (old) Millimeters Distance (new) Meters Draft Meters Temperature Celsius All units of measure are represented as JSON numbers.","title":"Units of measurement"},{"location":"endpoints/#get-tracks","text":"Returns tracks driven: { \"tracks\": [ { \"track\": 123, \"trackName\": \"abc\", \"boat\": 12, \"boatName\": \"Her Highness\", \"points\": 42, \"duration\": 3500, \"distance\": 1234, \"topSpeed\": 24.1, \"avgSpeed\": 23.2, \"avgWaterTemp\": 6.1, \"topPoint\": { \"id\": 123, \"coord\": { \"lng\": 60.24, \"lat\": 24.1 }, \"speed\": 24.1 } } ] }","title":"GET /tracks"},{"location":"endpoints/#put-trackstrack_name","text":"Modifies the title of the given track: { \"title\": \"Evening boating\" } Provide the track name in the URL.","title":"PUT /tracks/:track_name"},{"location":"endpoints/#patch-trackstrack_id","text":"Modifies the comments of the given track: { \"comments\": \"Rainy and delightful!\" }","title":"PATCH /tracks/:track_id"},{"location":"endpoints/#get-usersme","text":"Returns user information including any boats: { \"user\": { \"id\": 123, \"username\": \"jack\", \"email\": \"jack@example.com\", \"boats\": [ { \"id\": 12, \"name: \"Her Highness\", \"token\": \"abc123\" } ], \"enabled\": true, \"invites\": [ { \"boat\": { \"id\": 15, \"name\": \"HMS Royal\" }, \"state\": \"awaiting\" } ], \"friends\": [ { \"boat\": { \"id\": 14, \"name\": \"Titanic\" }, \"friend\": { \"id\": 123, \"email\": \"baby@example.com\" }, \"state\": \"accepted\" } ] } } Key invites contains any boats you have been granted access. Key friends contains any boat permissions you have granted to other users. Key state is any of the following: awaiting accepted rejected","title":"GET /users/me"},{"location":"endpoints/#put-usersme","text":"Changes the user's language. Use the following payload: { \"language\": \"language_code_here\" } The following language codes are supported: Code Language sv-SE Swedish fi-FI Finnish en-US English","title":"PUT /users/me"},{"location":"endpoints/#post-usersme","text":"Use this endpoint to exchange an authorization code for an ID token. Provide the code in the JSON payload: { \"code\": \"abcd1234\" } Returns an ID token: { \"email\": \"santa@example.com\", \"idToken\": \"abc.def.geh\" } Provide the returned ID token in the Authorization header of subsequent requests.","title":"POST /users/me"},{"location":"endpoints/#post-usersmetokens","text":"Refresh your ID token using this endpoint. Returns a refreshed ID token: { \"email\": \"santa@example.com\", \"idToken\": \"abc.def.geh\" } Call this endpoint if other endpoints respond with HTTP 403.","title":"POST /users/me/tokens"},{"location":"endpoints/#patch-boatsboat_id","text":"Changes the name of the given boat: { \"boatName\": \"My Lady\" } Obtain boat IDs using the /users/me endpoint above.","title":"PATCH /boats/:boat_id"},{"location":"endpoints/#post-usersnotifications","text":"Subscribes to push notifications: { \"token\": \"device_token\", \"device\": \"ios\" } Key device must be one of: Value Meaning ios iOS token android Android token","title":"POST /users/notifications"},{"location":"endpoints/#post-usersnotificationsdisable","text":"Unsubscribes from push notifications: { \"token\": \"device_token\", }","title":"POST /users/notifications/disable"},{"location":"endpoints/#get-routessrclatsrclngdestlatdestlng","text":"Returns the shortest route between two points along fairways. Provide the source and destination coordinates in the request. Example request: GET /routes/60.14729/24.85396/60.11478/24.87489 Example response: { \"from\": { \"lat\": 60.14729290768696, \"lng\": 24.853965806435724 }, \"to\": { \"lat\": 60.1147881804653, \"lng\": 24.87489090627807 }, \"totalCost\": 5498.050648111757, \"duration\": 0.355, \"route\": { \"cost\": 4770.0589143530415, \"links\": [ { \"cost\": 0, \"to\": { \"lat\": 60.149, \"lng\": 24.8534 } }, { \"cost\": 1400.7671712474576, \"to\": { \"lat\": 60.137, \"lng\": 24.8611 } }, ... { \"cost\": 670.6786486135463, \"to\": { \"lat\": 60.119, \"lng\": 24.8702 } } ] } } The response contains the following items: Key Type Meaning totalCost Number Distance in meters from source to destination, including the distance from the provided coordinates to nearby fairways route.cost Number Distance in meters along fairways route.links Array The route as an array of hops along fairway points","title":"GET /routes/:srclat/:srclng/:destlat/:destlng"},{"location":"endpoints/#post-usersboats","text":"Boat owners may invite other users to access the data of their boat: To invite user 123 to access boat 14: { \"boat\": 14, \"email\": \"friend@example.com\" }","title":"POST /users/boats"},{"location":"endpoints/#post-invitesrespond","text":"Respond to an invite using the following JSON payload: { \"boat\": 14, \"accept\": true }","title":"POST /invites/respond"},{"location":"endpoints/#post-invitesrevoke","text":"To revoke access from user to boat : { \"boat\": 14, \"user\": 12 }","title":"POST /invites/revoke"},{"location":"endpoints/#websocket-wsupdates","text":"Clients (web, iOS, Android) receive live boat updates using this WebSocket endpoint. The JSON-formatted messages use the following general format: { \"event\": \"event_type_here\", \"body\": { ... event-specific body goes here ... } } The following event types are used, with examples below: Event Meaning coords Updated coordinates for boats vessels Updated AIS location data for vessels ping Ping event (can be ignored)","title":"WebSocket /ws/updates"},{"location":"endpoints/#updated-coordinates","text":"Example JSON: { \"event\": \"coords\", \"body\": { \"coords\": [ { \"coord\": { \"lng\": 60.24, \"lat\": 24.1 }, \"boatTime\": \"\", \"speed\": 41.1, \"waterTemp\": 11.2, \"depth\": 5000 } ], \"from\": { \"track\": \"123\", \"trackName\": \"abc\", \"trackTitle\": \"Nice ride\", \"canonical\": \"nice-ride\", \"boat:\": \"456\", \"boatName\": \"Amina\", \"username\": \"jack\", \"points\": 42, \"duration\": 3500, \"distance\": 1234, \"topSpeed\": 24.1, \"avgSpeed\": 23.2, \"avgWaterTemp\": 6.1 } } }","title":"Updated coordinates"},{"location":"endpoints/#updated-vessel-locations","text":"Example JSON: { \"event\": \"vessels\", \"body\": { \"vessels\": [ { \"mmsi\": 123456, \"name\": \"Amina\", \"shipType\": 80, \"coord\": { \"lng\": 60.24, \"lat\": 24.1 }, \"sog\": 9.8, \"cog\": 123.1, \"draft\": 8.7, \"destination\": \"TALLINN\", \"eta\": 12, \"timestampMillis\": 123456789, \"timestampFormatted\": \"\" } ] } }","title":"Updated vessel locations"},{"location":"endpoints/#ping-event","text":"Example JSON: { \"event\": \"ping\", \"body\": { \"sent\": 123456789 } }","title":"Ping event"},{"location":"endpoints/#websocket-wsboats","text":"Agents send NMEA 0183 sentences to the backend using this endpoint. The JSON-formatted messages must be of the following format: { \"sentences\": [ \"$GPGGA,174239,6110.2076,N,06450.5518,E,1,12,0.50,0,M,19.5,M,,*63\", \"$GPZDA,141735,04,05,2018,-03,00*69\" ] } Provide the newest sentences last in the sentences array. The server may send ping events to the agent over the socket at any time: { \"event\": \"ping\", \"body\": { \"sent\": 123456789 } }","title":"WebSocket /ws/boats"},{"location":"privacy/","text":"Privacy Policy This privacy policy describes how your information is used and stored when you use this app. The purpose of using and storing your information is to enable app functionality and optimize your user experience. Your information is not used for any other purpose than enabling application features. Your information is not shared with third parties. This app may communicate with networked servers to retrieve charts, icons, and tracks. The email address of signed in users is read for identification purposes. Other user data is not used. No personal data is shared with third parties. Network requests may be logged by server software.","title":"Privacy"},{"location":"privacy/#privacy-policy","text":"This privacy policy describes how your information is used and stored when you use this app. The purpose of using and storing your information is to enable app functionality and optimize your user experience. Your information is not used for any other purpose than enabling application features. Your information is not shared with third parties. This app may communicate with networked servers to retrieve charts, icons, and tracks. The email address of signed in users is read for identification purposes. Other user data is not used. No personal data is shared with third parties. Network requests may be logged by server software.","title":"Privacy Policy"},{"location":"support/","text":"Support Should you have any questions, you may: email info@boat-tracker.com open an issue on GitHub","title":"Support"},{"location":"support/#support","text":"Should you have any questions, you may: email info@boat-tracker.com open an issue on GitHub","title":"Support"}]}