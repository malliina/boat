{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Develop Develop Boat-Tracker clients using this JSON API. The iOS app and web app both use this API. Versioning The JSON API is versioned. Specify the API version in the Accept HTTP header. The following versions are currently supported: application/vnd.boat.v1+json application/vnd.boat.v2+json The documentation covers the latest API version (v2), therefore use the following header: Accept application/vnd.boat.v2+json Authentication Boat-Tracker uses Google's OAuth 2.0 authentication system. Clients must Initiate the OAuth 2.0 flow with Google Obtain an ID token upon successful authentication with Google Deliver the ID token to the Boat-Tracker backend when making authenticated API calls Set the ID token in the Authorization header under the Bearer scheme: Authorization: Bearer google_id_token_goes_here Errors Error responses use the following JSON format: { \"errors\": [ { \"message\": \"JWT expired.\", \"key\": \"token_expired\" } ] } Error keys include but are not limited to: Key Meaning token_expired The JWT has expired. The client should obtain a new one from Google and try again. input The client provided invalid input. Check your inputs. generic Most likely clients cannot recover from this.","title":"Develop"},{"location":"#develop","text":"Develop Boat-Tracker clients using this JSON API. The iOS app and web app both use this API.","title":"Develop"},{"location":"#versioning","text":"The JSON API is versioned. Specify the API version in the Accept HTTP header. The following versions are currently supported: application/vnd.boat.v1+json application/vnd.boat.v2+json The documentation covers the latest API version (v2), therefore use the following header: Accept application/vnd.boat.v2+json","title":"Versioning"},{"location":"#authentication","text":"Boat-Tracker uses Google's OAuth 2.0 authentication system. Clients must Initiate the OAuth 2.0 flow with Google Obtain an ID token upon successful authentication with Google Deliver the ID token to the Boat-Tracker backend when making authenticated API calls Set the ID token in the Authorization header under the Bearer scheme: Authorization: Bearer google_id_token_goes_here","title":"Authentication"},{"location":"#errors","text":"Error responses use the following JSON format: { \"errors\": [ { \"message\": \"JWT expired.\", \"key\": \"token_expired\" } ] } Error keys include but are not limited to: Key Meaning token_expired The JWT has expired. The client should obtain a new one from Google and try again. input The client provided invalid input. Check your inputs. generic Most likely clients cannot recover from this.","title":"Errors"},{"location":"agent/","text":"Agent Run the agent software on a small computer and connect it to your chartplotter. The agent runs as a Systemd service and exposes an HTTP server on port 8080. It is tested on a Raspberry Pi 3 running Raspbian. Installation Download the latest version from www.boat-tracker.com/files Install the package: dpkg -i boat-agent_x.x.x_all.deb Open a web browser and connect to the HTTP server on port 8080 In the web form, input the IP address and HTTP port of your chartplotter Optionally, input the boat token available in the iOS app Connect this agent to the same network as your chartplotter The agent establishes a TCP connection to your chartplotter and receives NMEA 0183 messages Alternatively, you can configure the plotter IP/port -combination in a configuration file set by the conf.dir system property containing the following format: { \"host\": \"10.0.0.1\", \"port\": 10033, \"token\": \"abcd1234\", \"enabled\": true } Optionally, sign in to the iOS app to obtain a boat token. A token assigns any NMEA 0183 messages to the user with the given token, and subsequently the user can view any tracks recorded with the given token from the iOS app or web interface. Custom implementations If this agent is not good enough for you, you can send NMEA 0183 sentences to boat-tracker.com using the HTTP API directly. Open a WebSocket to wss://www.boat-tracker.com/ws/boats Optionally, provide your boat token in header X-Token when opening the WebSocket. Send NMEA 0183 sentences over the socket as JSON-formatted text messages The JSON messages must be of the following format: { \"sentences\": [ \"$GPGGA,174239,6110.2076,N,06450.5518,E,1,12,0.50,0,M,19.5,M,,*63\", \"$GPZDA,141735,04,05,2018,-03,00*69\" ] }","title":"Agent"},{"location":"agent/#agent","text":"Run the agent software on a small computer and connect it to your chartplotter. The agent runs as a Systemd service and exposes an HTTP server on port 8080. It is tested on a Raspberry Pi 3 running Raspbian.","title":"Agent"},{"location":"agent/#installation","text":"Download the latest version from www.boat-tracker.com/files Install the package: dpkg -i boat-agent_x.x.x_all.deb Open a web browser and connect to the HTTP server on port 8080 In the web form, input the IP address and HTTP port of your chartplotter Optionally, input the boat token available in the iOS app Connect this agent to the same network as your chartplotter The agent establishes a TCP connection to your chartplotter and receives NMEA 0183 messages Alternatively, you can configure the plotter IP/port -combination in a configuration file set by the conf.dir system property containing the following format: { \"host\": \"10.0.0.1\", \"port\": 10033, \"token\": \"abcd1234\", \"enabled\": true } Optionally, sign in to the iOS app to obtain a boat token. A token assigns any NMEA 0183 messages to the user with the given token, and subsequently the user can view any tracks recorded with the given token from the iOS app or web interface.","title":"Installation"},{"location":"agent/#custom-implementations","text":"If this agent is not good enough for you, you can send NMEA 0183 sentences to boat-tracker.com using the HTTP API directly. Open a WebSocket to wss://www.boat-tracker.com/ws/boats Optionally, provide your boat token in header X-Token when opening the WebSocket. Send NMEA 0183 sentences over the socket as JSON-formatted text messages The JSON messages must be of the following format: { \"sentences\": [ \"$GPGGA,174239,6110.2076,N,06450.5518,E,1,12,0.50,0,M,19.5,M,,*63\", \"$GPZDA,141735,04,05,2018,-03,00*69\" ] }","title":"Custom implementations"},{"location":"endpoints/","text":"Endpoints HTTP endpoints return JSON. GET /users/me Returns user information including any boats: { \"user\": { \"id\": 123, \"username\": \"jack\", \"email\": \"jack@example.com\", \"boats\": [ { \"id\": 12, \"name: \"Her Highness\", \"token\": \"abc123\" } ], \"enabled\": true } } GET /tracks Returns tracks driven: { \"tracks\": [ { \"track\": 123, \"trackName\": \"abc\", \"boat\": 12, \"boatName\": \"Her Highness\", \"user\": 123, \"username\": \"jack\", \"points\": 42, \"duration\": 3500, \"distance\": 1234, \"topSpeed\": 24.1, \"avgSpeed\": 23.2, \"avgWaterTemp\": 6.1, \"topPoint\": { \"id\": 123, \"coord\": { \"lng\": 60.24, \"lat\": 24.1 }, \"speed\": 24.1 } } ] } The following units are used: Key Unit duration seconds distance meters speed knots topSpeed knots avgSpeed knots avgWaterTemp celsius POST /users/notifications Subscribes to push notifications: { \"token\": \"device_token\", \"device\": \"ios\" } Key device must be one of: Value Meaning ios iOS token android Android token POST /users/notifications/disable Unsubscribes from push notifications: { \"token\": \"device_token\", }","title":"HTTP Endpoints"},{"location":"endpoints/#endpoints","text":"HTTP endpoints return JSON.","title":"Endpoints"},{"location":"endpoints/#get-usersme","text":"Returns user information including any boats: { \"user\": { \"id\": 123, \"username\": \"jack\", \"email\": \"jack@example.com\", \"boats\": [ { \"id\": 12, \"name: \"Her Highness\", \"token\": \"abc123\" } ], \"enabled\": true } }","title":"GET /users/me"},{"location":"endpoints/#get-tracks","text":"Returns tracks driven: { \"tracks\": [ { \"track\": 123, \"trackName\": \"abc\", \"boat\": 12, \"boatName\": \"Her Highness\", \"user\": 123, \"username\": \"jack\", \"points\": 42, \"duration\": 3500, \"distance\": 1234, \"topSpeed\": 24.1, \"avgSpeed\": 23.2, \"avgWaterTemp\": 6.1, \"topPoint\": { \"id\": 123, \"coord\": { \"lng\": 60.24, \"lat\": 24.1 }, \"speed\": 24.1 } } ] } The following units are used: Key Unit duration seconds distance meters speed knots topSpeed knots avgSpeed knots avgWaterTemp celsius","title":"GET /tracks"},{"location":"endpoints/#post-usersnotifications","text":"Subscribes to push notifications: { \"token\": \"device_token\", \"device\": \"ios\" } Key device must be one of: Value Meaning ios iOS token android Android token","title":"POST /users/notifications"},{"location":"endpoints/#post-usersnotificationsdisable","text":"Unsubscribes from push notifications: { \"token\": \"device_token\", }","title":"POST /users/notifications/disable"}]}